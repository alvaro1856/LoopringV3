// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExchangeStakeDeposited extends ethereum.Event {
  get params(): ExchangeStakeDeposited__Params {
    return new ExchangeStakeDeposited__Params(this);
  }
}

export class ExchangeStakeDeposited__Params {
  _event: ExchangeStakeDeposited;

  constructor(event: ExchangeStakeDeposited) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExchangeStakeWithdrawn extends ethereum.Event {
  get params(): ExchangeStakeWithdrawn__Params {
    return new ExchangeStakeWithdrawn__Params(this);
  }
}

export class ExchangeStakeWithdrawn__Params {
  _event: ExchangeStakeWithdrawn;

  constructor(event: ExchangeStakeWithdrawn) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExchangeStakeBurned extends ethereum.Event {
  get params(): ExchangeStakeBurned__Params {
    return new ExchangeStakeBurned__Params(this);
  }
}

export class ExchangeStakeBurned__Params {
  _event: ExchangeStakeBurned;

  constructor(event: ExchangeStakeBurned) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeeStakeDeposited extends ethereum.Event {
  get params(): ProtocolFeeStakeDeposited__Params {
    return new ProtocolFeeStakeDeposited__Params(this);
  }
}

export class ProtocolFeeStakeDeposited__Params {
  _event: ProtocolFeeStakeDeposited;

  constructor(event: ProtocolFeeStakeDeposited) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeeStakeWithdrawn extends ethereum.Event {
  get params(): ProtocolFeeStakeWithdrawn__Params {
    return new ProtocolFeeStakeWithdrawn__Params(this);
  }
}

export class ProtocolFeeStakeWithdrawn__Params {
  _event: ProtocolFeeStakeWithdrawn;

  constructor(event: ProtocolFeeStakeWithdrawn) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SettingsUpdated extends ethereum.Event {
  get params(): SettingsUpdated__Params {
    return new SettingsUpdated__Params(this);
  }
}

export class SettingsUpdated__Params {
  _event: SettingsUpdated;

  constructor(event: SettingsUpdated) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExchangeInitialized extends ethereum.Event {
  get params(): ExchangeInitialized__Params {
    return new ExchangeInitialized__Params(this);
  }
}

export class ExchangeInitialized__Params {
  _event: ExchangeInitialized;

  constructor(event: ExchangeInitialized) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exchangeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get onchainDataAvailability(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoopringV3__getProtocolFeeValuesResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class LoopringV3 extends ethereum.SmartContract {
  static bind(address: Address): LoopringV3 {
    return new LoopringV3("LoopringV3", address);
  }

  withdrawExchangeStake(
    exchangeId: BigInt,
    recipient: Address,
    requestedAmount: BigInt
  ): BigInt {
    let result = super.call(
      "withdrawExchangeStake",
      "withdrawExchangeStake(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(requestedAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawExchangeStake(
    exchangeId: BigInt,
    recipient: Address,
    requestedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawExchangeStake",
      "withdrawExchangeStake(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(requestedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxProtocolMakerFeeBips(): i32 {
    let result = super.call(
      "maxProtocolMakerFeeBips",
      "maxProtocolMakerFeeBips():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_maxProtocolMakerFeeBips(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxProtocolMakerFeeBips",
      "maxProtocolMakerFeeBips():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxProtocolTakerFeeBips(): i32 {
    let result = super.call(
      "maxProtocolTakerFeeBips",
      "maxProtocolTakerFeeBips():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_maxProtocolTakerFeeBips(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxProtocolTakerFeeBips",
      "maxProtocolTakerFeeBips():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  targetProtocolMakerFeeStake(): BigInt {
    let result = super.call(
      "targetProtocolMakerFeeStake",
      "targetProtocolMakerFeeStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetProtocolMakerFeeStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetProtocolMakerFeeStake",
      "targetProtocolMakerFeeStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalFineLRC(): BigInt {
    let result = super.call(
      "withdrawalFineLRC",
      "withdrawalFineLRC():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawalFineLRC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalFineLRC",
      "withdrawalFineLRC():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canExchangeCommitBlocks(
    exchangeId: BigInt,
    onchainDataAvailability: boolean
  ): boolean {
    let result = super.call(
      "canExchangeCommitBlocks",
      "canExchangeCommitBlocks(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromBoolean(onchainDataAvailability)
      ]
    );

    return result[0].toBoolean();
  }

  try_canExchangeCommitBlocks(
    exchangeId: BigInt,
    onchainDataAvailability: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canExchangeCommitBlocks",
      "canExchangeCommitBlocks(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromBoolean(onchainDataAvailability)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  universalRegistry(): Address {
    let result = super.call(
      "universalRegistry",
      "universalRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_universalRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "universalRegistry",
      "universalRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  downtimeCostCalculator(): Address {
    let result = super.call(
      "downtimeCostCalculator",
      "downtimeCostCalculator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_downtimeCostCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "downtimeCostCalculator",
      "downtimeCostCalculator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lrcAddress(): Address {
    let result = super.call("lrcAddress", "lrcAddress():(address)", []);

    return result[0].toAddress();
  }

  try_lrcAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("lrcAddress", "lrcAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenRegistrationFeeLRCDelta(): BigInt {
    let result = super.call(
      "tokenRegistrationFeeLRCDelta",
      "tokenRegistrationFeeLRCDelta():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenRegistrationFeeLRCDelta(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenRegistrationFeeLRCDelta",
      "tokenRegistrationFeeLRCDelta():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositExchangeStake(exchangeId: BigInt, amountLRC: BigInt): BigInt {
    let result = super.call(
      "depositExchangeStake",
      "depositExchangeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amountLRC)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositExchangeStake(
    exchangeId: BigInt,
    amountLRC: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositExchangeStake",
      "depositExchangeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amountLRC)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wethAddress(): Address {
    let result = super.call("wethAddress", "wethAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wethAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("wethAddress", "wethAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  targetProtocolTakerFeeStake(): BigInt {
    let result = super.call(
      "targetProtocolTakerFeeStake",
      "targetProtocolTakerFeeStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetProtocolTakerFeeStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetProtocolTakerFeeStake",
      "targetProtocolTakerFeeStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositProtocolFeeStake(exchangeId: BigInt, amountLRC: BigInt): BigInt {
    let result = super.call(
      "depositProtocolFeeStake",
      "depositProtocolFeeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amountLRC)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositProtocolFeeStake(
    exchangeId: BigInt,
    amountLRC: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositProtocolFeeStake",
      "depositProtocolFeeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amountLRC)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeCreationCostLRC(): BigInt {
    let result = super.call(
      "exchangeCreationCostLRC",
      "exchangeCreationCostLRC():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeCreationCostLRC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeCreationCostLRC",
      "exchangeCreationCostLRC():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFeeValues(
    exchangeId: BigInt,
    onchainDataAvailability: boolean
  ): LoopringV3__getProtocolFeeValuesResult {
    let result = super.call(
      "getProtocolFeeValues",
      "getProtocolFeeValues(uint256,bool):(uint8,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromBoolean(onchainDataAvailability)
      ]
    );

    return new LoopringV3__getProtocolFeeValuesResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_getProtocolFeeValues(
    exchangeId: BigInt,
    onchainDataAvailability: boolean
  ): ethereum.CallResult<LoopringV3__getProtocolFeeValuesResult> {
    let result = super.tryCall(
      "getProtocolFeeValues",
      "getProtocolFeeValues(uint256,bool):(uint8,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromBoolean(onchainDataAvailability)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoopringV3__getProtocolFeeValuesResult(
        value[0].toI32(),
        value[1].toI32()
      )
    );
  }

  burnExchangeStake(exchangeId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "burnExchangeStake",
      "burnExchangeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_burnExchangeStake(
    exchangeId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnExchangeStake",
      "burnExchangeStake(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(exchangeId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStake(): BigInt {
    let result = super.call("totalStake", "totalStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStake", "totalStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockVerifierAddress(): Address {
    let result = super.call(
      "blockVerifierAddress",
      "blockVerifierAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_blockVerifierAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blockVerifierAddress",
      "blockVerifierAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenRegistrationFeeLRCBase(): BigInt {
    let result = super.call(
      "tokenRegistrationFeeLRCBase",
      "tokenRegistrationFeeLRCBase():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenRegistrationFeeLRCBase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenRegistrationFeeLRCBase",
      "tokenRegistrationFeeLRCBase():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeVault(): Address {
    let result = super.call(
      "protocolFeeVault",
      "protocolFeeVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeVault",
      "protocolFeeVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minExchangeStakeWithDataAvailability(): BigInt {
    let result = super.call(
      "minExchangeStakeWithDataAvailability",
      "minExchangeStakeWithDataAvailability():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minExchangeStakeWithDataAvailability(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minExchangeStakeWithDataAvailability",
      "minExchangeStakeWithDataAvailability():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minExchangeStakeWithoutDataAvailability(): BigInt {
    let result = super.call(
      "minExchangeStakeWithoutDataAvailability",
      "minExchangeStakeWithoutDataAvailability():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minExchangeStakeWithoutDataAvailability(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minExchangeStakeWithoutDataAvailability",
      "minExchangeStakeWithoutDataAvailability():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExchangeStake(exchangeId: BigInt): BigInt {
    let result = super.call(
      "getExchangeStake",
      "getExchangeStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(exchangeId)]
    );

    return result[0].toBigInt();
  }

  try_getExchangeStake(exchangeId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeStake",
      "getExchangeStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(exchangeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minProtocolTakerFeeBips(): i32 {
    let result = super.call(
      "minProtocolTakerFeeBips",
      "minProtocolTakerFeeBips():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_minProtocolTakerFeeBips(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "minProtocolTakerFeeBips",
      "minProtocolTakerFeeBips():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getProtocolFeeStake(exchangeId: BigInt): BigInt {
    let result = super.call(
      "getProtocolFeeStake",
      "getProtocolFeeStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(exchangeId)]
    );

    return result[0].toBigInt();
  }

  try_getProtocolFeeStake(exchangeId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFeeStake",
      "getProtocolFeeStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(exchangeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minProtocolMakerFeeBips(): i32 {
    let result = super.call(
      "minProtocolMakerFeeBips",
      "minProtocolMakerFeeBips():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_minProtocolMakerFeeBips(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "minProtocolMakerFeeBips",
      "minProtocolMakerFeeBips():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxWithdrawalFee(): BigInt {
    let result = super.call(
      "maxWithdrawalFee",
      "maxWithdrawalFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxWithdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdrawalFee",
      "maxWithdrawalFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revertFineLRC(): BigInt {
    let result = super.call("revertFineLRC", "revertFineLRC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_revertFineLRC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "revertFineLRC",
      "revertFineLRC():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class WithdrawExchangeStakeCall extends ethereum.Call {
  get inputs(): WithdrawExchangeStakeCall__Inputs {
    return new WithdrawExchangeStakeCall__Inputs(this);
  }

  get outputs(): WithdrawExchangeStakeCall__Outputs {
    return new WithdrawExchangeStakeCall__Outputs(this);
  }
}

export class WithdrawExchangeStakeCall__Inputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get requestedAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawExchangeStakeCall__Outputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get amountLRC(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateProtocolFeeSettingsCall extends ethereum.Call {
  get inputs(): UpdateProtocolFeeSettingsCall__Inputs {
    return new UpdateProtocolFeeSettingsCall__Inputs(this);
  }

  get outputs(): UpdateProtocolFeeSettingsCall__Outputs {
    return new UpdateProtocolFeeSettingsCall__Outputs(this);
  }
}

export class UpdateProtocolFeeSettingsCall__Inputs {
  _call: UpdateProtocolFeeSettingsCall;

  constructor(call: UpdateProtocolFeeSettingsCall) {
    this._call = call;
  }

  get _minProtocolTakerFeeBips(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _maxProtocolTakerFeeBips(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _minProtocolMakerFeeBips(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _maxProtocolMakerFeeBips(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _targetProtocolTakerFeeStake(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _targetProtocolMakerFeeStake(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class UpdateProtocolFeeSettingsCall__Outputs {
  _call: UpdateProtocolFeeSettingsCall;

  constructor(call: UpdateProtocolFeeSettingsCall) {
    this._call = call;
  }
}

export class DepositExchangeStakeCall extends ethereum.Call {
  get inputs(): DepositExchangeStakeCall__Inputs {
    return new DepositExchangeStakeCall__Inputs(this);
  }

  get outputs(): DepositExchangeStakeCall__Outputs {
    return new DepositExchangeStakeCall__Outputs(this);
  }
}

export class DepositExchangeStakeCall__Inputs {
  _call: DepositExchangeStakeCall;

  constructor(call: DepositExchangeStakeCall) {
    this._call = call;
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountLRC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositExchangeStakeCall__Outputs {
  _call: DepositExchangeStakeCall;

  constructor(call: DepositExchangeStakeCall) {
    this._call = call;
  }

  get stakedLRC(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class DepositProtocolFeeStakeCall extends ethereum.Call {
  get inputs(): DepositProtocolFeeStakeCall__Inputs {
    return new DepositProtocolFeeStakeCall__Inputs(this);
  }

  get outputs(): DepositProtocolFeeStakeCall__Outputs {
    return new DepositProtocolFeeStakeCall__Outputs(this);
  }
}

export class DepositProtocolFeeStakeCall__Inputs {
  _call: DepositProtocolFeeStakeCall;

  constructor(call: DepositProtocolFeeStakeCall) {
    this._call = call;
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountLRC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositProtocolFeeStakeCall__Outputs {
  _call: DepositProtocolFeeStakeCall;

  constructor(call: DepositProtocolFeeStakeCall) {
    this._call = call;
  }

  get stakedLRC(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeeStakeCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeeStakeCall__Inputs {
    return new WithdrawProtocolFeeStakeCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeeStakeCall__Outputs {
    return new WithdrawProtocolFeeStakeCall__Outputs(this);
  }
}

export class WithdrawProtocolFeeStakeCall__Inputs {
  _call: WithdrawProtocolFeeStakeCall;

  constructor(call: WithdrawProtocolFeeStakeCall) {
    this._call = call;
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountLRC(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawProtocolFeeStakeCall__Outputs {
  _call: WithdrawProtocolFeeStakeCall;

  constructor(call: WithdrawProtocolFeeStakeCall) {
    this._call = call;
  }
}

export class BurnExchangeStakeCall extends ethereum.Call {
  get inputs(): BurnExchangeStakeCall__Inputs {
    return new BurnExchangeStakeCall__Inputs(this);
  }

  get outputs(): BurnExchangeStakeCall__Outputs {
    return new BurnExchangeStakeCall__Outputs(this);
  }
}

export class BurnExchangeStakeCall__Inputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnExchangeStakeCall__Outputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }

  get burnedLRC(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateSettingsCall extends ethereum.Call {
  get inputs(): UpdateSettingsCall__Inputs {
    return new UpdateSettingsCall__Inputs(this);
  }

  get outputs(): UpdateSettingsCall__Outputs {
    return new UpdateSettingsCall__Outputs(this);
  }
}

export class UpdateSettingsCall__Inputs {
  _call: UpdateSettingsCall;

  constructor(call: UpdateSettingsCall) {
    this._call = call;
  }

  get _protocolFeeVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _blockVerifierAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _downtimeCostCalculator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _exchangeCreationCostLRC(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxWithdrawalFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tokenRegistrationFeeLRCBase(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _tokenRegistrationFeeLRCDelta(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _minExchangeStakeWithDataAvailability(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minExchangeStakeWithoutDataAvailability(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _revertFineLRC(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _withdrawalFineLRC(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class UpdateSettingsCall__Outputs {
  _call: UpdateSettingsCall;

  constructor(call: UpdateSettingsCall) {
    this._call = call;
  }
}

export class InitializeExchangeCall extends ethereum.Call {
  get inputs(): InitializeExchangeCall__Inputs {
    return new InitializeExchangeCall__Inputs(this);
  }

  get outputs(): InitializeExchangeCall__Outputs {
    return new InitializeExchangeCall__Outputs(this);
  }
}

export class InitializeExchangeCall__Inputs {
  _call: InitializeExchangeCall;

  constructor(call: InitializeExchangeCall) {
    this._call = call;
  }

  get exchangeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exchangeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get operator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get onchainDataAvailability(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class InitializeExchangeCall__Outputs {
  _call: InitializeExchangeCall;

  constructor(call: InitializeExchangeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _universalRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lrcAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _wethAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _protocolFeeVault(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _blockVerifierAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _downtimeCostCalculator(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
