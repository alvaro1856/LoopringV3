// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get pubKeyX(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AccountUpdated extends ethereum.Event {
  get params(): AccountUpdated__Params {
    return new AccountUpdated__Params(this);
  }
}

export class AccountUpdated__Params {
  _event: AccountUpdated;

  constructor(event: AccountUpdated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get pubKeyX(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenRegistered extends ethereum.Event {
  get params(): TokenRegistered__Params {
    return new TokenRegistered__Params(this);
  }
}

export class TokenRegistered__Params {
  _event: TokenRegistered;

  constructor(event: TokenRegistered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class OperatorChanged extends ethereum.Event {
  get params(): OperatorChanged__Params {
    return new OperatorChanged__Params(this);
  }
}

export class OperatorChanged__Params {
  _event: OperatorChanged;

  constructor(event: OperatorChanged) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOperator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOperator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AddressWhitelistChanged extends ethereum.Event {
  get params(): AddressWhitelistChanged__Params {
    return new AddressWhitelistChanged__Params(this);
  }
}

export class AddressWhitelistChanged__Params {
  _event: AddressWhitelistChanged;

  constructor(event: AddressWhitelistChanged) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldAddressWhitelist(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAddressWhitelist(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FeesUpdated extends ethereum.Event {
  get params(): FeesUpdated__Params {
    return new FeesUpdated__Params(this);
  }
}

export class FeesUpdated__Params {
  _event: FeesUpdated;

  constructor(event: FeesUpdated) {
    this._event = event;
  }

  get exchangeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get accountCreationFeeETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountUpdateFeeETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get depositFeeETH(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get withdrawalFeeETH(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Shutdown extends ethereum.Event {
  get params(): Shutdown__Params {
    return new Shutdown__Params(this);
  }
}

export class Shutdown__Params {
  _event: Shutdown;

  constructor(event: Shutdown) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BlockCommitted extends ethereum.Event {
  get params(): BlockCommitted__Params {
    return new BlockCommitted__Params(this);
  }
}

export class BlockCommitted__Params {
  _event: BlockCommitted;

  constructor(event: BlockCommitted) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get publicDataHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class BlockVerified extends ethereum.Event {
  get params(): BlockVerified__Params {
    return new BlockVerified__Params(this);
  }
}

export class BlockVerified__Params {
  _event: BlockVerified;

  constructor(event: BlockVerified) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BlockFinalized extends ethereum.Event {
  get params(): BlockFinalized__Params {
    return new BlockFinalized__Params(this);
  }
}

export class BlockFinalized__Params {
  _event: BlockFinalized;

  constructor(event: BlockFinalized) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Revert extends ethereum.Event {
  get params(): Revert__Params {
    return new Revert__Params(this);
  }
}

export class Revert__Params {
  _event: Revert;

  constructor(event: Revert) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DepositRequested extends ethereum.Event {
  get params(): DepositRequested__Params {
    return new DepositRequested__Params(this);
  }
}

export class DepositRequested__Params {
  _event: DepositRequested;

  constructor(event: DepositRequested) {
    this._event = event;
  }

  get depositIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get accountID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tokenID(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get pubKeyX(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class BlockFeeWithdrawn extends ethereum.Event {
  get params(): BlockFeeWithdrawn__Params {
    return new BlockFeeWithdrawn__Params(this);
  }
}

export class BlockFeeWithdrawn__Params {
  _event: BlockFeeWithdrawn;

  constructor(event: BlockFeeWithdrawn) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalRequested extends ethereum.Event {
  get params(): WithdrawalRequested__Params {
    return new WithdrawalRequested__Params(this);
  }
}

export class WithdrawalRequested__Params {
  _event: WithdrawalRequested;

  constructor(event: WithdrawalRequested) {
    this._event = event;
  }

  get withdrawalIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get accountID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tokenID(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawalCompleted extends ethereum.Event {
  get params(): WithdrawalCompleted__Params {
    return new WithdrawalCompleted__Params(this);
  }
}

export class WithdrawalCompleted__Params {
  _event: WithdrawalCompleted;

  constructor(event: WithdrawalCompleted) {
    this._event = event;
  }

  get accountID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawalFailed extends ethereum.Event {
  get params(): WithdrawalFailed__Params {
    return new WithdrawalFailed__Params(this);
  }
}

export class WithdrawalFailed__Params {
  _event: WithdrawalFailed;

  constructor(event: WithdrawalFailed) {
    this._event = event;
  }

  get accountID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenID(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProtocolFeesUpdated extends ethereum.Event {
  get params(): ProtocolFeesUpdated__Params {
    return new ProtocolFeesUpdated__Params(this);
  }
}

export class ProtocolFeesUpdated__Params {
  _event: ProtocolFeesUpdated;

  constructor(event: ProtocolFeesUpdated) {
    this._event = event;
  }

  get takerFeeBips(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get makerFeeBips(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get previousTakerFeeBips(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get previousMakerFeeBips(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TokenNotOwnedByUsersWithdrawn extends ethereum.Event {
  get params(): TokenNotOwnedByUsersWithdrawn__Params {
    return new TokenNotOwnedByUsersWithdrawn__Params(this);
  }
}

export class TokenNotOwnedByUsersWithdrawn__Params {
  _event: TokenNotOwnedByUsersWithdrawn;

  constructor(event: TokenNotOwnedByUsersWithdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get feeVault(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Cloned extends ethereum.Event {
  get params(): Cloned__Params {
    return new Cloned__Params(this);
  }
}

export class Cloned__Params {
  _event: Cloned;

  constructor(event: Cloned) {
    this._event = event;
  }

  get clone(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ExchangeV3__getBlockResult {
  value0: Bytes;
  value1: Bytes;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: i32;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    return map;
  }
}

export class ExchangeV3__getProtocolFeeValuesResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class ExchangeV3__getDepositRequestResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ExchangeV3__getRequestStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ExchangeV3__getWithdrawRequestResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ExchangeV3__getFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ExchangeV3__getAccountResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ExchangeV3 extends ethereum.SmartContract {
  static bind(address: Address): ExchangeV3 {
    return new ExchangeV3("ExchangeV3", address);
  }

  getLRCFeeForRegisteringOneMoreToken(): BigInt {
    let result = super.call(
      "getLRCFeeForRegisteringOneMoreToken",
      "getLRCFeeForRegisteringOneMoreToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLRCFeeForRegisteringOneMoreToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLRCFeeForRegisteringOneMoreToken",
      "getLRCFeeForRegisteringOneMoreToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlock(blockIdx: BigInt): ExchangeV3__getBlockResult {
    let result = super.call(
      "getBlock",
      "getBlock(uint256):(bytes32,bytes32,uint8,uint8,uint16,uint32,uint32,uint32,bool,uint16)",
      [ethereum.Value.fromUnsignedBigInt(blockIdx)]
    );

    return new ExchangeV3__getBlockResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toI32()
    );
  }

  try_getBlock(
    blockIdx: BigInt
  ): ethereum.CallResult<ExchangeV3__getBlockResult> {
    let result = super.tryCall(
      "getBlock",
      "getBlock(uint256):(bytes32,bytes32,uint8,uint8,uint16,uint32,uint32,uint32,bool,uint16)",
      [ethereum.Value.fromUnsignedBigInt(blockIdx)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getBlockResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toI32()
      )
    );
  }

  registerToken(tokenAddress: Address): i32 {
    let result = super.call(
      "registerToken",
      "registerToken(address):(uint16)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toI32();
  }

  try_registerToken(tokenAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "registerToken",
      "registerToken(address):(uint16)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  clone(): Address {
    let result = super.call("clone", "clone():(address)", []);

    return result[0].toAddress();
  }

  try_clone(): ethereum.CallResult<Address> {
    let result = super.tryCall("clone", "clone():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDowntimeCostLRC(durationMinutes: BigInt): BigInt {
    let result = super.call(
      "getDowntimeCostLRC",
      "getDowntimeCostLRC(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(durationMinutes)]
    );

    return result[0].toBigInt();
  }

  try_getDowntimeCostLRC(durationMinutes: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDowntimeCostLRC",
      "getDowntimeCostLRC(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(durationMinutes)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setAddressWhitelist(_addressWhitelist: Address): Address {
    let result = super.call(
      "setAddressWhitelist",
      "setAddressWhitelist(address):(address)",
      [ethereum.Value.fromAddress(_addressWhitelist)]
    );

    return result[0].toAddress();
  }

  try_setAddressWhitelist(
    _addressWhitelist: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "setAddressWhitelist",
      "setAddressWhitelist(address):(address)",
      [ethereum.Value.fromAddress(_addressWhitelist)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumBlocksFinalized(): BigInt {
    let result = super.call(
      "getNumBlocksFinalized",
      "getNumBlocksFinalized():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumBlocksFinalized(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumBlocksFinalized",
      "getNumBlocksFinalized():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInMaintenance(): boolean {
    let result = super.call("isInMaintenance", "isInMaintenance():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInMaintenance(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInMaintenance",
      "isInMaintenance():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  genesisBlockHash(): Bytes {
    let result = super.call(
      "genesisBlockHash",
      "genesisBlockHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_genesisBlockHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "genesisBlockHash",
      "genesisBlockHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getProtocolFeeValues(): ExchangeV3__getProtocolFeeValuesResult {
    let result = super.call(
      "getProtocolFeeValues",
      "getProtocolFeeValues():(uint32,uint8,uint8,uint8,uint8)",
      []
    );

    return new ExchangeV3__getProtocolFeeValuesResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32()
    );
  }

  try_getProtocolFeeValues(): ethereum.CallResult<
    ExchangeV3__getProtocolFeeValuesResult
  > {
    let result = super.tryCall(
      "getProtocolFeeValues",
      "getProtocolFeeValues():(uint32,uint8,uint8,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getProtocolFeeValuesResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32()
      )
    );
  }

  getTotalTimeInMaintenanceSeconds(): BigInt {
    let result = super.call(
      "getTotalTimeInMaintenanceSeconds",
      "getTotalTimeInMaintenanceSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalTimeInMaintenanceSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalTimeInMaintenanceSeconds",
      "getTotalTimeInMaintenanceSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTokenID(tokenAddress: Address): i32 {
    let result = super.call("getTokenID", "getTokenID(address):(uint16)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toI32();
  }

  try_getTokenID(tokenAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("getTokenID", "getTokenID(address):(uint16)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDepositRequest(index: BigInt): ExchangeV3__getDepositRequestResult {
    let result = super.call(
      "getDepositRequest",
      "getDepositRequest(uint256):(bytes32,uint256,uint32)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new ExchangeV3__getDepositRequestResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getDepositRequest(
    index: BigInt
  ): ethereum.CallResult<ExchangeV3__getDepositRequestResult> {
    let result = super.tryCall(
      "getDepositRequest",
      "getDepositRequest(uint256):(bytes32,uint256,uint32)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getDepositRequestResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getBlockHeight(): BigInt {
    let result = super.call("getBlockHeight", "getBlockHeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBlockHeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockHeight",
      "getBlockHeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumDepositRequestsProcessed(): BigInt {
    let result = super.call(
      "getNumDepositRequestsProcessed",
      "getNumDepositRequestsProcessed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumDepositRequestsProcessed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumDepositRequestsProcessed",
      "getNumDepositRequestsProcessed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExchangeCreationTimestamp(): BigInt {
    let result = super.call(
      "getExchangeCreationTimestamp",
      "getExchangeCreationTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExchangeCreationTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeCreationTimestamp",
      "getExchangeCreationTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRemainingDowntime(): BigInt {
    let result = super.call(
      "getRemainingDowntime",
      "getRemainingDowntime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRemainingDowntime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRemainingDowntime",
      "getRemainingDowntime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInWithdrawalMode(): boolean {
    let result = super.call(
      "isInWithdrawalMode",
      "isInWithdrawalMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isInWithdrawalMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInWithdrawalMode",
      "isInWithdrawalMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getConstants(): Array<BigInt> {
    let result = super.call("getConstants", "getConstants():(uint256[20])", []);

    return result[0].toBigIntArray();
  }

  try_getConstants(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getConstants",
      "getConstants():(uint256[20])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNumAccounts(): BigInt {
    let result = super.call("getNumAccounts", "getNumAccounts():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNumAccounts(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumAccounts",
      "getNumAccounts():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumAvailableDepositSlots(): BigInt {
    let result = super.call(
      "getNumAvailableDepositSlots",
      "getNumAvailableDepositSlots():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumAvailableDepositSlots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumAvailableDepositSlots",
      "getNumAvailableDepositSlots():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setOperator(_operator: Address): Address {
    let result = super.call("setOperator", "setOperator(address):(address)", [
      ethereum.Value.fromAddress(_operator)
    ]);

    return result[0].toAddress();
  }

  try_setOperator(_operator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "setOperator",
      "setOperator(address):(address)",
      [ethereum.Value.fromAddress(_operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawBlockFee(blockIdx: BigInt, feeRecipient: Address): BigInt {
    let result = super.call(
      "withdrawBlockFee",
      "withdrawBlockFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(blockIdx),
        ethereum.Value.fromAddress(feeRecipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawBlockFee(
    blockIdx: BigInt,
    feeRecipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawBlockFee",
      "withdrawBlockFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(blockIdx),
        ethereum.Value.fromAddress(feeRecipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isShutdown(): boolean {
    let result = super.call("isShutdown", "isShutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_isShutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isShutdown", "isShutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRequestStats(): ExchangeV3__getRequestStatsResult {
    let result = super.call(
      "getRequestStats",
      "getRequestStats():(uint256,uint256,uint256,uint256)",
      []
    );

    return new ExchangeV3__getRequestStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getRequestStats(): ethereum.CallResult<
    ExchangeV3__getRequestStatsResult
  > {
    let result = super.tryCall(
      "getRequestStats",
      "getRequestStats():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getRequestStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getWithdrawRequest(index: BigInt): ExchangeV3__getWithdrawRequestResult {
    let result = super.call(
      "getWithdrawRequest",
      "getWithdrawRequest(uint256):(bytes32,uint256,uint32)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new ExchangeV3__getWithdrawRequestResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getWithdrawRequest(
    index: BigInt
  ): ethereum.CallResult<ExchangeV3__getWithdrawRequestResult> {
    let result = super.tryCall(
      "getWithdrawRequest",
      "getWithdrawRequest(uint256):(bytes32,uint256,uint32)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getWithdrawRequestResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  withdrawTokenNotOwnedByUsers(tokenAddress: Address): BigInt {
    let result = super.call(
      "withdrawTokenNotOwnedByUsers",
      "withdrawTokenNotOwnedByUsers(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_withdrawTokenNotOwnedByUsers(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawTokenNotOwnedByUsers",
      "withdrawTokenNotOwnedByUsers(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawExchangeStake(recipient: Address): BigInt {
    let result = super.call(
      "withdrawExchangeStake",
      "withdrawExchangeStake(address):(uint256)",
      [ethereum.Value.fromAddress(recipient)]
    );

    return result[0].toBigInt();
  }

  try_withdrawExchangeStake(recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawExchangeStake",
      "withdrawExchangeStake(address):(uint256)",
      [ethereum.Value.fromAddress(recipient)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFees(): ExchangeV3__getFeesResult {
    let result = super.call(
      "getFees",
      "getFees():(uint256,uint256,uint256,uint256)",
      []
    );

    return new ExchangeV3__getFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getFees(): ethereum.CallResult<ExchangeV3__getFeesResult> {
    let result = super.tryCall(
      "getFees",
      "getFees():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getNumAvailableWithdrawalSlots(): BigInt {
    let result = super.call(
      "getNumAvailableWithdrawalSlots",
      "getNumAvailableWithdrawalSlots():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumAvailableWithdrawalSlots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumAvailableWithdrawalSlots",
      "getNumAvailableWithdrawalSlots():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumWithdrawalRequestsProcessed(): BigInt {
    let result = super.call(
      "getNumWithdrawalRequestsProcessed",
      "getNumWithdrawalRequestsProcessed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumWithdrawalRequestsProcessed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumWithdrawalRequestsProcessed",
      "getNumWithdrawalRequestsProcessed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenAddress(tokenID: i32): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(tokenID: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExchangeStake(): BigInt {
    let result = super.call(
      "getExchangeStake",
      "getExchangeStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExchangeStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeStake",
      "getExchangeStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAccountBalanceCorrect(
    merkleRoot: BigInt,
    accountID: i32,
    tokenID: i32,
    pubKeyX: BigInt,
    pubKeyY: BigInt,
    nonce: BigInt,
    balance: BigInt,
    tradeHistoryRoot: BigInt,
    accountPath: Array<BigInt>,
    balancePath: Array<BigInt>
  ): boolean {
    let result = super.call(
      "isAccountBalanceCorrect",
      "isAccountBalanceCorrect(uint256,uint24,uint16,uint256,uint256,uint32,uint96,uint256,uint256[30],uint256[12]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(merkleRoot),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(accountID)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromUnsignedBigInt(pubKeyX),
        ethereum.Value.fromUnsignedBigInt(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(tradeHistoryRoot),
        ethereum.Value.fromUnsignedBigIntArray(accountPath),
        ethereum.Value.fromUnsignedBigIntArray(balancePath)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAccountBalanceCorrect(
    merkleRoot: BigInt,
    accountID: i32,
    tokenID: i32,
    pubKeyX: BigInt,
    pubKeyY: BigInt,
    nonce: BigInt,
    balance: BigInt,
    tradeHistoryRoot: BigInt,
    accountPath: Array<BigInt>,
    balancePath: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAccountBalanceCorrect",
      "isAccountBalanceCorrect(uint256,uint24,uint16,uint256,uint256,uint32,uint96,uint256,uint256[30],uint256[12]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(merkleRoot),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(accountID)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID)),
        ethereum.Value.fromUnsignedBigInt(pubKeyX),
        ethereum.Value.fromUnsignedBigInt(pubKeyY),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(tradeHistoryRoot),
        ethereum.Value.fromUnsignedBigIntArray(accountPath),
        ethereum.Value.fromUnsignedBigIntArray(balancePath)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAccount(owner: Address): ExchangeV3__getAccountResult {
    let result = super.call(
      "getAccount",
      "getAccount(address):(uint24,uint256,uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return new ExchangeV3__getAccountResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccount(
    owner: Address
  ): ethereum.CallResult<ExchangeV3__getAccountResult> {
    let result = super.tryCall(
      "getAccount",
      "getAccount(address):(uint24,uint256,uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getAccountResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  shutdown(): boolean {
    let result = super.call("shutdown", "shutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_shutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shutdown", "shutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RegisterTokenCall extends ethereum.Call {
  get inputs(): RegisterTokenCall__Inputs {
    return new RegisterTokenCall__Inputs(this);
  }

  get outputs(): RegisterTokenCall__Outputs {
    return new RegisterTokenCall__Outputs(this);
  }
}

export class RegisterTokenCall__Inputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterTokenCall__Outputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class CloneCall extends ethereum.Call {
  get inputs(): CloneCall__Inputs {
    return new CloneCall__Inputs(this);
  }

  get outputs(): CloneCall__Outputs {
    return new CloneCall__Outputs(this);
  }
}

export class CloneCall__Inputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }
}

export class CloneCall__Outputs {
  _call: CloneCall;

  constructor(call: CloneCall) {
    this._call = call;
  }

  get cloneAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetAddressWhitelistCall extends ethereum.Call {
  get inputs(): SetAddressWhitelistCall__Inputs {
    return new SetAddressWhitelistCall__Inputs(this);
  }

  get outputs(): SetAddressWhitelistCall__Outputs {
    return new SetAddressWhitelistCall__Outputs(this);
  }
}

export class SetAddressWhitelistCall__Inputs {
  _call: SetAddressWhitelistCall;

  constructor(call: SetAddressWhitelistCall) {
    this._call = call;
  }

  get _addressWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressWhitelistCall__Outputs {
  _call: SetAddressWhitelistCall;

  constructor(call: SetAddressWhitelistCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class VerifyBlocksCall extends ethereum.Call {
  get inputs(): VerifyBlocksCall__Inputs {
    return new VerifyBlocksCall__Inputs(this);
  }

  get outputs(): VerifyBlocksCall__Outputs {
    return new VerifyBlocksCall__Outputs(this);
  }
}

export class VerifyBlocksCall__Inputs {
  _call: VerifyBlocksCall;

  constructor(call: VerifyBlocksCall) {
    this._call = call;
  }

  get blockIndices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get proofs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class VerifyBlocksCall__Outputs {
  _call: VerifyBlocksCall;

  constructor(call: VerifyBlocksCall) {
    this._call = call;
  }
}

export class DisableTokenDepositCall extends ethereum.Call {
  get inputs(): DisableTokenDepositCall__Inputs {
    return new DisableTokenDepositCall__Inputs(this);
  }

  get outputs(): DisableTokenDepositCall__Outputs {
    return new DisableTokenDepositCall__Outputs(this);
  }
}

export class DisableTokenDepositCall__Inputs {
  _call: DisableTokenDepositCall;

  constructor(call: DisableTokenDepositCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableTokenDepositCall__Outputs {
  _call: DisableTokenDepositCall;

  constructor(call: DisableTokenDepositCall) {
    this._call = call;
  }
}

export class RevertBlockCall extends ethereum.Call {
  get inputs(): RevertBlockCall__Inputs {
    return new RevertBlockCall__Inputs(this);
  }

  get outputs(): RevertBlockCall__Outputs {
    return new RevertBlockCall__Outputs(this);
  }
}

export class RevertBlockCall__Inputs {
  _call: RevertBlockCall;

  constructor(call: RevertBlockCall) {
    this._call = call;
  }

  get blockIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevertBlockCall__Outputs {
  _call: RevertBlockCall;

  constructor(call: RevertBlockCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeesCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeesCall__Inputs {
    return new WithdrawProtocolFeesCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeesCall__Outputs {
    return new WithdrawProtocolFeesCall__Outputs(this);
  }
}

export class WithdrawProtocolFeesCall__Inputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawProtocolFeesCall__Outputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }
}

export class WithdrawFromMerkleTreeCall extends ethereum.Call {
  get inputs(): WithdrawFromMerkleTreeCall__Inputs {
    return new WithdrawFromMerkleTreeCall__Inputs(this);
  }

  get outputs(): WithdrawFromMerkleTreeCall__Outputs {
    return new WithdrawFromMerkleTreeCall__Outputs(this);
  }
}

export class WithdrawFromMerkleTreeCall__Inputs {
  _call: WithdrawFromMerkleTreeCall;

  constructor(call: WithdrawFromMerkleTreeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pubKeyX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get balance(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get tradeHistoryRoot(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get accountPath(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get balancePath(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class WithdrawFromMerkleTreeCall__Outputs {
  _call: WithdrawFromMerkleTreeCall;

  constructor(call: WithdrawFromMerkleTreeCall) {
    this._call = call;
  }
}

export class CommitBlockCall extends ethereum.Call {
  get inputs(): CommitBlockCall__Inputs {
    return new CommitBlockCall__Inputs(this);
  }

  get outputs(): CommitBlockCall__Outputs {
    return new CommitBlockCall__Outputs(this);
  }
}

export class CommitBlockCall__Inputs {
  _call: CommitBlockCall;

  constructor(call: CommitBlockCall) {
    this._call = call;
  }

  get blockType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get blockSize(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get blockVersion(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get offchainData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CommitBlockCall__Outputs {
  _call: CommitBlockCall;

  constructor(call: CommitBlockCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawFromMerkleTreeForCall extends ethereum.Call {
  get inputs(): WithdrawFromMerkleTreeForCall__Inputs {
    return new WithdrawFromMerkleTreeForCall__Inputs(this);
  }

  get outputs(): WithdrawFromMerkleTreeForCall__Outputs {
    return new WithdrawFromMerkleTreeForCall__Outputs(this);
  }
}

export class WithdrawFromMerkleTreeForCall__Inputs {
  _call: WithdrawFromMerkleTreeForCall;

  constructor(call: WithdrawFromMerkleTreeForCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get pubKeyX(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get balance(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get tradeHistoryRoot(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get accountPath(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }

  get balancePath(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class WithdrawFromMerkleTreeForCall__Outputs {
  _call: WithdrawFromMerkleTreeForCall;

  constructor(call: WithdrawFromMerkleTreeForCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAccountAndDepositCall extends ethereum.Call {
  get inputs(): UpdateAccountAndDepositCall__Inputs {
    return new UpdateAccountAndDepositCall__Inputs(this);
  }

  get outputs(): UpdateAccountAndDepositCall__Outputs {
    return new UpdateAccountAndDepositCall__Outputs(this);
  }
}

export class UpdateAccountAndDepositCall__Inputs {
  _call: UpdateAccountAndDepositCall;

  constructor(call: UpdateAccountAndDepositCall) {
    this._call = call;
  }

  get pubKeyX(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get permission(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class UpdateAccountAndDepositCall__Outputs {
  _call: UpdateAccountAndDepositCall;

  constructor(call: UpdateAccountAndDepositCall) {
    this._call = call;
  }

  get accountID(): i32 {
    return this._call.outputValues[0].value.toI32();
  }

  get isAccountNew(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }

  get isAccountUpdated(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _accountCreationFeeETH(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accountUpdateFeeETH(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _depositFeeETH(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _withdrawalFeeETH(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class EnableTokenDepositCall extends ethereum.Call {
  get inputs(): EnableTokenDepositCall__Inputs {
    return new EnableTokenDepositCall__Inputs(this);
  }

  get outputs(): EnableTokenDepositCall__Outputs {
    return new EnableTokenDepositCall__Outputs(this);
  }
}

export class EnableTokenDepositCall__Inputs {
  _call: EnableTokenDepositCall;

  constructor(call: EnableTokenDepositCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableTokenDepositCall__Outputs {
  _call: EnableTokenDepositCall;

  constructor(call: EnableTokenDepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class StartOrContinueMaintenanceModeCall extends ethereum.Call {
  get inputs(): StartOrContinueMaintenanceModeCall__Inputs {
    return new StartOrContinueMaintenanceModeCall__Inputs(this);
  }

  get outputs(): StartOrContinueMaintenanceModeCall__Outputs {
    return new StartOrContinueMaintenanceModeCall__Outputs(this);
  }
}

export class StartOrContinueMaintenanceModeCall__Inputs {
  _call: StartOrContinueMaintenanceModeCall;

  constructor(call: StartOrContinueMaintenanceModeCall) {
    this._call = call;
  }

  get durationMinutes(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartOrContinueMaintenanceModeCall__Outputs {
  _call: StartOrContinueMaintenanceModeCall;

  constructor(call: StartOrContinueMaintenanceModeCall) {
    this._call = call;
  }
}

export class BurnExchangeStakeCall extends ethereum.Call {
  get inputs(): BurnExchangeStakeCall__Inputs {
    return new BurnExchangeStakeCall__Inputs(this);
  }

  get outputs(): BurnExchangeStakeCall__Outputs {
    return new BurnExchangeStakeCall__Outputs(this);
  }
}

export class BurnExchangeStakeCall__Inputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }
}

export class BurnExchangeStakeCall__Outputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeeStakeCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeeStakeCall__Inputs {
    return new WithdrawProtocolFeeStakeCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeeStakeCall__Outputs {
    return new WithdrawProtocolFeeStakeCall__Outputs(this);
  }
}

export class WithdrawProtocolFeeStakeCall__Inputs {
  _call: WithdrawProtocolFeeStakeCall;

  constructor(call: WithdrawProtocolFeeStakeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawProtocolFeeStakeCall__Outputs {
  _call: WithdrawProtocolFeeStakeCall;

  constructor(call: WithdrawProtocolFeeStakeCall) {
    this._call = call;
  }
}

export class DepositToCall extends ethereum.Call {
  get inputs(): DepositToCall__Inputs {
    return new DepositToCall__Inputs(this);
  }

  get outputs(): DepositToCall__Outputs {
    return new DepositToCall__Outputs(this);
  }
}

export class DepositToCall__Inputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositToCall__Outputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }
}

export class WithdrawFromDepositRequestCall extends ethereum.Call {
  get inputs(): WithdrawFromDepositRequestCall__Inputs {
    return new WithdrawFromDepositRequestCall__Inputs(this);
  }

  get outputs(): WithdrawFromDepositRequestCall__Outputs {
    return new WithdrawFromDepositRequestCall__Outputs(this);
  }
}

export class WithdrawFromDepositRequestCall__Inputs {
  _call: WithdrawFromDepositRequestCall;

  constructor(call: WithdrawFromDepositRequestCall) {
    this._call = call;
  }

  get depositIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromDepositRequestCall__Outputs {
  _call: WithdrawFromDepositRequestCall;

  constructor(call: WithdrawFromDepositRequestCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class WithdrawBlockFeeCall extends ethereum.Call {
  get inputs(): WithdrawBlockFeeCall__Inputs {
    return new WithdrawBlockFeeCall__Inputs(this);
  }

  get outputs(): WithdrawBlockFeeCall__Outputs {
    return new WithdrawBlockFeeCall__Outputs(this);
  }
}

export class WithdrawBlockFeeCall__Inputs {
  _call: WithdrawBlockFeeCall;

  constructor(call: WithdrawBlockFeeCall) {
    this._call = call;
  }

  get blockIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawBlockFeeCall__Outputs {
  _call: WithdrawBlockFeeCall;

  constructor(call: WithdrawBlockFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _loopringAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _onchainDataAvailability(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class WithdrawTokenNotOwnedByUsersCall extends ethereum.Call {
  get inputs(): WithdrawTokenNotOwnedByUsersCall__Inputs {
    return new WithdrawTokenNotOwnedByUsersCall__Inputs(this);
  }

  get outputs(): WithdrawTokenNotOwnedByUsersCall__Outputs {
    return new WithdrawTokenNotOwnedByUsersCall__Outputs(this);
  }
}

export class WithdrawTokenNotOwnedByUsersCall__Inputs {
  _call: WithdrawTokenNotOwnedByUsersCall;

  constructor(call: WithdrawTokenNotOwnedByUsersCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokenNotOwnedByUsersCall__Outputs {
  _call: WithdrawTokenNotOwnedByUsersCall;

  constructor(call: WithdrawTokenNotOwnedByUsersCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawExchangeStakeCall extends ethereum.Call {
  get inputs(): WithdrawExchangeStakeCall__Inputs {
    return new WithdrawExchangeStakeCall__Inputs(this);
  }

  get outputs(): WithdrawExchangeStakeCall__Outputs {
    return new WithdrawExchangeStakeCall__Outputs(this);
  }
}

export class WithdrawExchangeStakeCall__Inputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawExchangeStakeCall__Outputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StopMaintenanceModeCall extends ethereum.Call {
  get inputs(): StopMaintenanceModeCall__Inputs {
    return new StopMaintenanceModeCall__Inputs(this);
  }

  get outputs(): StopMaintenanceModeCall__Outputs {
    return new StopMaintenanceModeCall__Outputs(this);
  }
}

export class StopMaintenanceModeCall__Inputs {
  _call: StopMaintenanceModeCall;

  constructor(call: StopMaintenanceModeCall) {
    this._call = call;
  }
}

export class StopMaintenanceModeCall__Outputs {
  _call: StopMaintenanceModeCall;

  constructor(call: StopMaintenanceModeCall) {
    this._call = call;
  }
}

export class DistributeWithdrawalsCall extends ethereum.Call {
  get inputs(): DistributeWithdrawalsCall__Inputs {
    return new DistributeWithdrawalsCall__Inputs(this);
  }

  get outputs(): DistributeWithdrawalsCall__Outputs {
    return new DistributeWithdrawalsCall__Outputs(this);
  }
}

export class DistributeWithdrawalsCall__Inputs {
  _call: DistributeWithdrawalsCall;

  constructor(call: DistributeWithdrawalsCall) {
    this._call = call;
  }

  get blockIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxNumWithdrawals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeWithdrawalsCall__Outputs {
  _call: DistributeWithdrawalsCall;

  constructor(call: DistributeWithdrawalsCall) {
    this._call = call;
  }
}

export class CreateOrUpdateAccountCall extends ethereum.Call {
  get inputs(): CreateOrUpdateAccountCall__Inputs {
    return new CreateOrUpdateAccountCall__Inputs(this);
  }

  get outputs(): CreateOrUpdateAccountCall__Outputs {
    return new CreateOrUpdateAccountCall__Outputs(this);
  }
}

export class CreateOrUpdateAccountCall__Inputs {
  _call: CreateOrUpdateAccountCall;

  constructor(call: CreateOrUpdateAccountCall) {
    this._call = call;
  }

  get pubKeyX(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pubKeyY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get permission(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateOrUpdateAccountCall__Outputs {
  _call: CreateOrUpdateAccountCall;

  constructor(call: CreateOrUpdateAccountCall) {
    this._call = call;
  }

  get accountID(): i32 {
    return this._call.outputValues[0].value.toI32();
  }

  get isAccountNew(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }

  get isAccountUpdated(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFromApprovedWithdrawalCall extends ethereum.Call {
  get inputs(): WithdrawFromApprovedWithdrawalCall__Inputs {
    return new WithdrawFromApprovedWithdrawalCall__Inputs(this);
  }

  get outputs(): WithdrawFromApprovedWithdrawalCall__Outputs {
    return new WithdrawFromApprovedWithdrawalCall__Outputs(this);
  }
}

export class WithdrawFromApprovedWithdrawalCall__Inputs {
  _call: WithdrawFromApprovedWithdrawalCall;

  constructor(call: WithdrawFromApprovedWithdrawalCall) {
    this._call = call;
  }

  get blockIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get slotIdx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFromApprovedWithdrawalCall__Outputs {
  _call: WithdrawFromApprovedWithdrawalCall;

  constructor(call: WithdrawFromApprovedWithdrawalCall) {
    this._call = call;
  }
}

export class ShutdownCall extends ethereum.Call {
  get inputs(): ShutdownCall__Inputs {
    return new ShutdownCall__Inputs(this);
  }

  get outputs(): ShutdownCall__Outputs {
    return new ShutdownCall__Outputs(this);
  }
}

export class ShutdownCall__Inputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class ShutdownCall__Outputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
