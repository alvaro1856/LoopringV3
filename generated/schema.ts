// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Exchange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("internalId", Value.fromBigInt(BigInt.zero()));
    this.set("proxyAddress", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("operator", Value.fromBytes(Bytes.empty()));
    this.set("onChainDataAvailability", Value.fromBoolean(false));
    this.set("takerFeeBips", Value.fromI32(0));
    this.set("makerFeeBips", Value.fromI32(0));
    this.set("accountCreationFee", Value.fromBigInt(BigInt.zero()));
    this.set("accountUpdateFee", Value.fromBigInt(BigInt.zero()));
    this.set("depositFee", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawalFee", Value.fromBigInt(BigInt.zero()));
    this.set("exchangeStake", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("exchangeStakeRaw", Value.fromBigInt(BigInt.zero()));
    this.set("protocolStake", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("protocolStakeRaw", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalExchangeStakeBurned",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalExchangeStakeBurnedRaw", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalExchangeStakeDeposited",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalExchangeStakeDepositedRaw", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalExchangeStakeWithdrawn",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalExchangeStakeWithdrawnRaw", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalProtocolStakeDeposited",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalProtocolStakeDepositedRaw", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalProtocolStakeWithdrawn",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalProtocolStakeWithdrawnRaw", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Exchange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Exchange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Exchange", id.toString(), this);
    }
  }

  static load(id: string): Exchange | null {
    return changetype<Exchange | null>(store.get("Exchange", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get internalId(): BigInt {
    let value = this.get("internalId");
    return value!.toBigInt();
  }

  set internalId(value: BigInt) {
    this.set("internalId", Value.fromBigInt(value));
  }

  get proxyAddress(): Bytes {
    let value = this.get("proxyAddress");
    return value!.toBytes();
  }

  set proxyAddress(value: Bytes) {
    this.set("proxyAddress", Value.fromBytes(value));
  }

  get implementationAddress(): Bytes | null {
    let value = this.get("implementationAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set implementationAddress(value: Bytes | null) {
    if (!value) {
      this.unset("implementationAddress");
    } else {
      this.set("implementationAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get addressWhitelist(): Bytes | null {
    let value = this.get("addressWhitelist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set addressWhitelist(value: Bytes | null) {
    if (!value) {
      this.unset("addressWhitelist");
    } else {
      this.set("addressWhitelist", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get onChainDataAvailability(): boolean {
    let value = this.get("onChainDataAvailability");
    return value!.toBoolean();
  }

  set onChainDataAvailability(value: boolean) {
    this.set("onChainDataAvailability", Value.fromBoolean(value));
  }

  get takerFeeBips(): i32 {
    let value = this.get("takerFeeBips");
    return value!.toI32();
  }

  set takerFeeBips(value: i32) {
    this.set("takerFeeBips", Value.fromI32(value));
  }

  get makerFeeBips(): i32 {
    let value = this.get("makerFeeBips");
    return value!.toI32();
  }

  set makerFeeBips(value: i32) {
    this.set("makerFeeBips", Value.fromI32(value));
  }

  get accountCreationFee(): BigInt {
    let value = this.get("accountCreationFee");
    return value!.toBigInt();
  }

  set accountCreationFee(value: BigInt) {
    this.set("accountCreationFee", Value.fromBigInt(value));
  }

  get accountUpdateFee(): BigInt {
    let value = this.get("accountUpdateFee");
    return value!.toBigInt();
  }

  set accountUpdateFee(value: BigInt) {
    this.set("accountUpdateFee", Value.fromBigInt(value));
  }

  get depositFee(): BigInt {
    let value = this.get("depositFee");
    return value!.toBigInt();
  }

  set depositFee(value: BigInt) {
    this.set("depositFee", Value.fromBigInt(value));
  }

  get withdrawalFee(): BigInt {
    let value = this.get("withdrawalFee");
    return value!.toBigInt();
  }

  set withdrawalFee(value: BigInt) {
    this.set("withdrawalFee", Value.fromBigInt(value));
  }

  get exchangeStake(): BigDecimal {
    let value = this.get("exchangeStake");
    return value!.toBigDecimal();
  }

  set exchangeStake(value: BigDecimal) {
    this.set("exchangeStake", Value.fromBigDecimal(value));
  }

  get exchangeStakeRaw(): BigInt {
    let value = this.get("exchangeStakeRaw");
    return value!.toBigInt();
  }

  set exchangeStakeRaw(value: BigInt) {
    this.set("exchangeStakeRaw", Value.fromBigInt(value));
  }

  get protocolStake(): BigDecimal {
    let value = this.get("protocolStake");
    return value!.toBigDecimal();
  }

  set protocolStake(value: BigDecimal) {
    this.set("protocolStake", Value.fromBigDecimal(value));
  }

  get protocolStakeRaw(): BigInt {
    let value = this.get("protocolStakeRaw");
    return value!.toBigInt();
  }

  set protocolStakeRaw(value: BigInt) {
    this.set("protocolStakeRaw", Value.fromBigInt(value));
  }

  get totalExchangeStakeBurned(): BigDecimal {
    let value = this.get("totalExchangeStakeBurned");
    return value!.toBigDecimal();
  }

  set totalExchangeStakeBurned(value: BigDecimal) {
    this.set("totalExchangeStakeBurned", Value.fromBigDecimal(value));
  }

  get totalExchangeStakeBurnedRaw(): BigInt {
    let value = this.get("totalExchangeStakeBurnedRaw");
    return value!.toBigInt();
  }

  set totalExchangeStakeBurnedRaw(value: BigInt) {
    this.set("totalExchangeStakeBurnedRaw", Value.fromBigInt(value));
  }

  get totalExchangeStakeDeposited(): BigDecimal {
    let value = this.get("totalExchangeStakeDeposited");
    return value!.toBigDecimal();
  }

  set totalExchangeStakeDeposited(value: BigDecimal) {
    this.set("totalExchangeStakeDeposited", Value.fromBigDecimal(value));
  }

  get totalExchangeStakeDepositedRaw(): BigInt {
    let value = this.get("totalExchangeStakeDepositedRaw");
    return value!.toBigInt();
  }

  set totalExchangeStakeDepositedRaw(value: BigInt) {
    this.set("totalExchangeStakeDepositedRaw", Value.fromBigInt(value));
  }

  get totalExchangeStakeWithdrawn(): BigDecimal {
    let value = this.get("totalExchangeStakeWithdrawn");
    return value!.toBigDecimal();
  }

  set totalExchangeStakeWithdrawn(value: BigDecimal) {
    this.set("totalExchangeStakeWithdrawn", Value.fromBigDecimal(value));
  }

  get totalExchangeStakeWithdrawnRaw(): BigInt {
    let value = this.get("totalExchangeStakeWithdrawnRaw");
    return value!.toBigInt();
  }

  set totalExchangeStakeWithdrawnRaw(value: BigInt) {
    this.set("totalExchangeStakeWithdrawnRaw", Value.fromBigInt(value));
  }

  get totalProtocolStakeDeposited(): BigDecimal {
    let value = this.get("totalProtocolStakeDeposited");
    return value!.toBigDecimal();
  }

  set totalProtocolStakeDeposited(value: BigDecimal) {
    this.set("totalProtocolStakeDeposited", Value.fromBigDecimal(value));
  }

  get totalProtocolStakeDepositedRaw(): BigInt {
    let value = this.get("totalProtocolStakeDepositedRaw");
    return value!.toBigInt();
  }

  set totalProtocolStakeDepositedRaw(value: BigInt) {
    this.set("totalProtocolStakeDepositedRaw", Value.fromBigInt(value));
  }

  get totalProtocolStakeWithdrawn(): BigDecimal {
    let value = this.get("totalProtocolStakeWithdrawn");
    return value!.toBigDecimal();
  }

  set totalProtocolStakeWithdrawn(value: BigDecimal) {
    this.set("totalProtocolStakeWithdrawn", Value.fromBigDecimal(value));
  }

  get totalProtocolStakeWithdrawnRaw(): BigInt {
    let value = this.get("totalProtocolStakeWithdrawnRaw");
    return value!.toBigInt();
  }

  set totalProtocolStakeWithdrawnRaw(value: BigInt) {
    this.set("totalProtocolStakeWithdrawnRaw", Value.fromBigInt(value));
  }

  get accounts(): Array<string> {
    let value = this.get("accounts");
    return value!.toStringArray();
  }

  set accounts(value: Array<string>) {
    this.set("accounts", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get blocks(): Array<string> {
    let value = this.get("blocks");
    return value!.toStringArray();
  }

  set blocks(value: Array<string>) {
    this.set("blocks", Value.fromStringArray(value));
  }

  get transactionEvents(): Array<string> {
    let value = this.get("transactionEvents");
    return value!.toStringArray();
  }

  set transactionEvents(value: Array<string>) {
    this.set("transactionEvents", Value.fromStringArray(value));
  }
}

export class DepositRequestedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("pubKeyY", Value.fromBigInt(BigInt.zero()));
    this.set("pubKeyX", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositRequestedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositRequestedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositRequestedEvent", id.toString(), this);
    }
  }

  static load(id: string): DepositRequestedEvent | null {
    return changetype<DepositRequestedEvent | null>(
      store.get("DepositRequestedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get pubKeyY(): BigInt {
    let value = this.get("pubKeyY");
    return value!.toBigInt();
  }

  set pubKeyY(value: BigInt) {
    this.set("pubKeyY", Value.fromBigInt(value));
  }

  get pubKeyX(): BigInt {
    let value = this.get("pubKeyX");
    return value!.toBigInt();
  }

  set pubKeyX(value: BigInt) {
    this.set("pubKeyX", Value.fromBigInt(value));
  }
}

export class WithdrawalRequestedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawalRequestedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawalRequestedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawalRequestedEvent", id.toString(), this);
    }
  }

  static load(id: string): WithdrawalRequestedEvent | null {
    return changetype<WithdrawalRequestedEvent | null>(
      store.get("WithdrawalRequestedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class WithdrawalFailedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("to", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawalFailedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawalFailedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawalFailedEvent", id.toString(), this);
    }
  }

  static load(id: string): WithdrawalFailedEvent | null {
    return changetype<WithdrawalFailedEvent | null>(
      store.get("WithdrawalFailedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }
}

export class WithdrawalCompletedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("to", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawalCompletedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawalCompletedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawalCompletedEvent", id.toString(), this);
    }
  }

  static load(id: string): WithdrawalCompletedEvent | null {
    return changetype<WithdrawalCompletedEvent | null>(
      store.get("WithdrawalCompletedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("internalId", Value.fromI32(0));
    this.set("pubKeyX", Value.fromBigInt(BigInt.zero()));
    this.set("pubKeyY", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get internalId(): i32 {
    let value = this.get("internalId");
    return value!.toI32();
  }

  set internalId(value: i32) {
    this.set("internalId", Value.fromI32(value));
  }

  get pubKeyX(): BigInt {
    let value = this.get("pubKeyX");
    return value!.toBigInt();
  }

  set pubKeyX(value: BigInt) {
    this.set("pubKeyX", Value.fromBigInt(value));
  }

  get pubKeyY(): BigInt {
    let value = this.get("pubKeyY");
    return value!.toBigInt();
  }

  set pubKeyY(value: BigInt) {
    this.set("pubKeyY", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value!.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get transactionEvents(): Array<string> {
    let value = this.get("transactionEvents");
    return value!.toStringArray();
  }

  set transactionEvents(value: Array<string>) {
    this.set("transactionEvents", Value.fromStringArray(value));
  }
}

export class AccountTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("totalDeposited", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalDepositedRaw", Value.fromBigInt(BigInt.zero()));
    this.set("totalWithdrawn", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalWithdrawnRaw", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountTokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountTokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountTokenBalance", id.toString(), this);
    }
  }

  static load(id: string): AccountTokenBalance | null {
    return changetype<AccountTokenBalance | null>(
      store.get("AccountTokenBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get totalDeposited(): BigDecimal {
    let value = this.get("totalDeposited");
    return value!.toBigDecimal();
  }

  set totalDeposited(value: BigDecimal) {
    this.set("totalDeposited", Value.fromBigDecimal(value));
  }

  get totalDepositedRaw(): BigInt {
    let value = this.get("totalDepositedRaw");
    return value!.toBigInt();
  }

  set totalDepositedRaw(value: BigInt) {
    this.set("totalDepositedRaw", Value.fromBigInt(value));
  }

  get totalWithdrawn(): BigDecimal {
    let value = this.get("totalWithdrawn");
    return value!.toBigDecimal();
  }

  set totalWithdrawn(value: BigDecimal) {
    this.set("totalWithdrawn", Value.fromBigDecimal(value));
  }

  get totalWithdrawnRaw(): BigInt {
    let value = this.get("totalWithdrawnRaw");
    return value!.toBigInt();
  }

  set totalWithdrawnRaw(value: BigInt) {
    this.set("totalWithdrawnRaw", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("internalId", Value.fromI32(0));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("decimals", Value.fromI32(0));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get internalId(): i32 {
    let value = this.get("internalId");
    return value!.toI32();
  }

  set internalId(value: i32) {
    this.set("internalId", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transactionEvents(): Array<string> {
    let value = this.get("transactionEvents");
    return value!.toStringArray();
  }

  set transactionEvents(value: Array<string>) {
    this.set("transactionEvents", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("lrcBalanceRaw", Value.fromBigInt(BigInt.zero()));
    this.set("lrcBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("lrcBurnedRaw", Value.fromBigInt(BigInt.zero()));
    this.set("lrcBurned", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set account(value: string | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromString(<string>value));
    }
  }

  get lrcBalanceRaw(): BigInt {
    let value = this.get("lrcBalanceRaw");
    return value!.toBigInt();
  }

  set lrcBalanceRaw(value: BigInt) {
    this.set("lrcBalanceRaw", Value.fromBigInt(value));
  }

  get lrcBalance(): BigDecimal {
    let value = this.get("lrcBalance");
    return value!.toBigDecimal();
  }

  set lrcBalance(value: BigDecimal) {
    this.set("lrcBalance", Value.fromBigDecimal(value));
  }

  get lrcBurnedRaw(): BigInt {
    let value = this.get("lrcBurnedRaw");
    return value!.toBigInt();
  }

  set lrcBurnedRaw(value: BigInt) {
    this.set("lrcBurnedRaw", Value.fromBigInt(value));
  }

  get lrcBurned(): BigDecimal {
    let value = this.get("lrcBurned");
    return value!.toBigDecimal();
  }

  set lrcBurned(value: BigDecimal) {
    this.set("lrcBurned", Value.fromBigDecimal(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("exchange", Value.fromString(""));
    this.set("status", Value.fromString(""));
    this.set("publicDataHash", Value.fromBytes(Bytes.empty()));
    this.set("feesWithdrawn", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get exchange(): string {
    let value = this.get("exchange");
    return value!.toString();
  }

  set exchange(value: string) {
    this.set("exchange", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get publicDataHash(): Bytes {
    let value = this.get("publicDataHash");
    return value!.toBytes();
  }

  set publicDataHash(value: Bytes) {
    this.set("publicDataHash", Value.fromBytes(value));
  }

  get feesWithdrawn(): BigInt {
    let value = this.get("feesWithdrawn");
    return value!.toBigInt();
  }

  set feesWithdrawn(value: BigInt) {
    this.set("feesWithdrawn", Value.fromBigInt(value));
  }

  get merkleRoot(): Bytes | null {
    let value = this.get("merkleRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set merkleRoot(value: Bytes | null) {
    if (!value) {
      this.unset("merkleRoot");
    } else {
      this.set("merkleRoot", Value.fromBytes(<Bytes>value));
    }
  }

  get blockType(): string | null {
    let value = this.get("blockType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockType(value: string | null) {
    if (!value) {
      this.unset("blockType");
    } else {
      this.set("blockType", Value.fromString(<string>value));
    }
  }

  get blockTypeRaw(): i32 {
    let value = this.get("blockTypeRaw");
    return value!.toI32();
  }

  set blockTypeRaw(value: i32) {
    this.set("blockTypeRaw", Value.fromI32(value));
  }

  get blockSize(): i32 {
    let value = this.get("blockSize");
    return value!.toI32();
  }

  set blockSize(value: i32) {
    this.set("blockSize", Value.fromI32(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get numDepositRequestsCommitted(): BigInt | null {
    let value = this.get("numDepositRequestsCommitted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numDepositRequestsCommitted(value: BigInt | null) {
    if (!value) {
      this.unset("numDepositRequestsCommitted");
    } else {
      this.set("numDepositRequestsCommitted", Value.fromBigInt(<BigInt>value));
    }
  }

  get numWithdrawalRequestsCommitted(): BigInt | null {
    let value = this.get("numWithdrawalRequestsCommitted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numWithdrawalRequestsCommitted(value: BigInt | null) {
    if (!value) {
      this.unset("numWithdrawalRequestsCommitted");
    } else {
      this.set(
        "numWithdrawalRequestsCommitted",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get blockFeeWithdrawn(): boolean {
    let value = this.get("blockFeeWithdrawn");
    return value!.toBoolean();
  }

  set blockFeeWithdrawn(value: boolean) {
    this.set("blockFeeWithdrawn", Value.fromBoolean(value));
  }

  get numWithdrawalsDistributed(): i32 {
    let value = this.get("numWithdrawalsDistributed");
    return value!.toI32();
  }

  set numWithdrawalsDistributed(value: i32) {
    this.set("numWithdrawalsDistributed", Value.fromI32(value));
  }
}

export class Circuit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockType", Value.fromString(""));
    this.set("blockTypeRaw", Value.fromI32(0));
    this.set("onchainDataAvailability", Value.fromBoolean(false));
    this.set("blockSize", Value.fromI32(0));
    this.set("blockVersion", Value.fromI32(0));
    this.set("enabled", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Circuit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Circuit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Circuit", id.toString(), this);
    }
  }

  static load(id: string): Circuit | null {
    return changetype<Circuit | null>(store.get("Circuit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockType(): string {
    let value = this.get("blockType");
    return value!.toString();
  }

  set blockType(value: string) {
    this.set("blockType", Value.fromString(value));
  }

  get blockTypeRaw(): i32 {
    let value = this.get("blockTypeRaw");
    return value!.toI32();
  }

  set blockTypeRaw(value: i32) {
    this.set("blockTypeRaw", Value.fromI32(value));
  }

  get onchainDataAvailability(): boolean {
    let value = this.get("onchainDataAvailability");
    return value!.toBoolean();
  }

  set onchainDataAvailability(value: boolean) {
    this.set("onchainDataAvailability", Value.fromBoolean(value));
  }

  get blockSize(): i32 {
    let value = this.get("blockSize");
    return value!.toI32();
  }

  set blockSize(value: i32) {
    this.set("blockSize", Value.fromI32(value));
  }

  get blockVersion(): i32 {
    let value = this.get("blockVersion");
    return value!.toI32();
  }

  set blockVersion(value: i32) {
    this.set("blockVersion", Value.fromI32(value));
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    return value!.toBoolean();
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }
}
